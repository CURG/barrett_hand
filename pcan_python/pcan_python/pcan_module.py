# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pcan_module', [dirname(__file__)])
        except ImportError:
            import _pcan_module
            return _pcan_module
        if fp is not None:
            try:
                _mod = imp.load_module('_pcan_module', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pcan_module = swig_import_helper()
    del swig_import_helper
else:
    import _pcan_module
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pcan_module.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcan_module.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _pcan_module.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _pcan_module.intArray___setitem__(self, *args)
    def cast(self): return _pcan_module.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pcan_module.intArray_frompointer
    if _newclass:frompointer = staticmethod(_pcan_module.intArray_frompointer)
intArray_swigregister = _pcan_module.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _pcan_module.intArray_frompointer(*args)
intArray_frompointer = _pcan_module.intArray_frompointer

CAN_BAUD_1M = _pcan_module.CAN_BAUD_1M
CAN_BAUD_500K = _pcan_module.CAN_BAUD_500K
CAN_BAUD_250K = _pcan_module.CAN_BAUD_250K
CAN_BAUD_125K = _pcan_module.CAN_BAUD_125K
CAN_BAUD_100K = _pcan_module.CAN_BAUD_100K
CAN_BAUD_50K = _pcan_module.CAN_BAUD_50K
CAN_BAUD_20K = _pcan_module.CAN_BAUD_20K
CAN_BAUD_10K = _pcan_module.CAN_BAUD_10K
CAN_BAUD_5K = _pcan_module.CAN_BAUD_5K
CAN_INIT_TYPE_EX = _pcan_module.CAN_INIT_TYPE_EX
CAN_INIT_TYPE_ST = _pcan_module.CAN_INIT_TYPE_ST

def CAN_Open(*args):
  return _pcan_module.CAN_Open(*args)
CAN_Open = _pcan_module.CAN_Open

def CAN_Init(*args):
  return _pcan_module.CAN_Init(*args)
CAN_Init = _pcan_module.CAN_Init

def CAN_Close(*args):
  return _pcan_module.CAN_Close(*args)
CAN_Close = _pcan_module.CAN_Close

def CAN_Status(*args):
  return _pcan_module.CAN_Status(*args)
CAN_Status = _pcan_module.CAN_Status

def CAN_Write(*args):
  return _pcan_module.CAN_Write(*args)
CAN_Write = _pcan_module.CAN_Write

def LINUX_CAN_Write_Timeout(*args):
  return _pcan_module.LINUX_CAN_Write_Timeout(*args)
LINUX_CAN_Write_Timeout = _pcan_module.LINUX_CAN_Write_Timeout

def CAN_Read(*args):
  return _pcan_module.CAN_Read(*args)
CAN_Read = _pcan_module.CAN_Read

def LINUX_CAN_Read(*args):
  return _pcan_module.LINUX_CAN_Read(*args)
LINUX_CAN_Read = _pcan_module.LINUX_CAN_Read

def LINUX_CAN_Read_Timeout(*args):
  return _pcan_module.LINUX_CAN_Read_Timeout(*args)
LINUX_CAN_Read_Timeout = _pcan_module.LINUX_CAN_Read_Timeout

def CAN_ResetFilter(*args):
  return _pcan_module.CAN_ResetFilter(*args)
CAN_ResetFilter = _pcan_module.CAN_ResetFilter

def CAN_MsgFilter(*args):
  return _pcan_module.CAN_MsgFilter(*args)
CAN_MsgFilter = _pcan_module.CAN_MsgFilter

def LINUX_CAN_FileHandle(*args):
  return _pcan_module.LINUX_CAN_FileHandle(*args)
LINUX_CAN_FileHandle = _pcan_module.LINUX_CAN_FileHandle

def LINUX_CAN_Extended_Status(*args):
  return _pcan_module.LINUX_CAN_Extended_Status(*args)
LINUX_CAN_Extended_Status = _pcan_module.LINUX_CAN_Extended_Status

def CAN_VersionInfo(*args):
  return _pcan_module.CAN_VersionInfo(*args)
CAN_VersionInfo = _pcan_module.CAN_VersionInfo

def nGetLastError():
  return _pcan_module.nGetLastError()
nGetLastError = _pcan_module.nGetLastError

def LINUX_CAN_Open(*args):
  return _pcan_module.LINUX_CAN_Open(*args)
LINUX_CAN_Open = _pcan_module.LINUX_CAN_Open

def LINUX_CAN_Statistics(*args):
  return _pcan_module.LINUX_CAN_Statistics(*args)
LINUX_CAN_Statistics = _pcan_module.LINUX_CAN_Statistics

def LINUX_CAN_BTR0BTR1(*args):
  return _pcan_module.LINUX_CAN_BTR0BTR1(*args)
LINUX_CAN_BTR0BTR1 = _pcan_module.LINUX_CAN_BTR0BTR1
HW_ISA = _pcan_module.HW_ISA
HW_DONGLE_SJA = _pcan_module.HW_DONGLE_SJA
HW_DONGLE_SJA_EPP = _pcan_module.HW_DONGLE_SJA_EPP
HW_DONGLE_PRO = _pcan_module.HW_DONGLE_PRO
HW_DONGLE_PRO_EPP = _pcan_module.HW_DONGLE_PRO_EPP
HW_ISA_SJA = _pcan_module.HW_ISA_SJA
HW_PCI = _pcan_module.HW_PCI
HW_USB = _pcan_module.HW_USB
HW_PCCARD = _pcan_module.HW_PCCARD
HW_USB_PRO = _pcan_module.HW_USB_PRO
CAN_MAX_STANDARD_ID = _pcan_module.CAN_MAX_STANDARD_ID
CAN_MAX_EXTENDED_ID = _pcan_module.CAN_MAX_EXTENDED_ID
CAN_ERR_OK = _pcan_module.CAN_ERR_OK
CAN_ERR_XMTFULL = _pcan_module.CAN_ERR_XMTFULL
CAN_ERR_OVERRUN = _pcan_module.CAN_ERR_OVERRUN
CAN_ERR_BUSLIGHT = _pcan_module.CAN_ERR_BUSLIGHT
CAN_ERR_BUSHEAVY = _pcan_module.CAN_ERR_BUSHEAVY
CAN_ERR_BUSOFF = _pcan_module.CAN_ERR_BUSOFF
CAN_ERR_QRCVEMPTY = _pcan_module.CAN_ERR_QRCVEMPTY
CAN_ERR_QOVERRUN = _pcan_module.CAN_ERR_QOVERRUN
CAN_ERR_QXMTFULL = _pcan_module.CAN_ERR_QXMTFULL
CAN_ERR_REGTEST = _pcan_module.CAN_ERR_REGTEST
CAN_ERR_NOVXD = _pcan_module.CAN_ERR_NOVXD
CAN_ERR_RESOURCE = _pcan_module.CAN_ERR_RESOURCE
CAN_ERR_ILLPARAMTYPE = _pcan_module.CAN_ERR_ILLPARAMTYPE
CAN_ERR_ILLPARAMVAL = _pcan_module.CAN_ERR_ILLPARAMVAL
CAN_ERRMASK_ILLHANDLE = _pcan_module.CAN_ERRMASK_ILLHANDLE
MSGTYPE_STATUS = _pcan_module.MSGTYPE_STATUS
MSGTYPE_EXTENDED = _pcan_module.MSGTYPE_EXTENDED
MSGTYPE_RTR = _pcan_module.MSGTYPE_RTR
MSGTYPE_STANDARD = _pcan_module.MSGTYPE_STANDARD
VERSIONSTRING_LEN = _pcan_module.VERSIONSTRING_LEN
class TPCANInit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPCANInit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPCANInit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wBTR0BTR1"] = _pcan_module.TPCANInit_wBTR0BTR1_set
    __swig_getmethods__["wBTR0BTR1"] = _pcan_module.TPCANInit_wBTR0BTR1_get
    if _newclass:wBTR0BTR1 = _swig_property(_pcan_module.TPCANInit_wBTR0BTR1_get, _pcan_module.TPCANInit_wBTR0BTR1_set)
    __swig_setmethods__["ucCANMsgType"] = _pcan_module.TPCANInit_ucCANMsgType_set
    __swig_getmethods__["ucCANMsgType"] = _pcan_module.TPCANInit_ucCANMsgType_get
    if _newclass:ucCANMsgType = _swig_property(_pcan_module.TPCANInit_ucCANMsgType_get, _pcan_module.TPCANInit_ucCANMsgType_set)
    __swig_setmethods__["ucListenOnly"] = _pcan_module.TPCANInit_ucListenOnly_set
    __swig_getmethods__["ucListenOnly"] = _pcan_module.TPCANInit_ucListenOnly_get
    if _newclass:ucListenOnly = _swig_property(_pcan_module.TPCANInit_ucListenOnly_get, _pcan_module.TPCANInit_ucListenOnly_set)
    def __init__(self): 
        this = _pcan_module.new_TPCANInit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcan_module.delete_TPCANInit
    __del__ = lambda self : None;
TPCANInit_swigregister = _pcan_module.TPCANInit_swigregister
TPCANInit_swigregister(TPCANInit)

class TPCANMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPCANMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPCANMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ID"] = _pcan_module.TPCANMsg_ID_set
    __swig_getmethods__["ID"] = _pcan_module.TPCANMsg_ID_get
    if _newclass:ID = _swig_property(_pcan_module.TPCANMsg_ID_get, _pcan_module.TPCANMsg_ID_set)
    __swig_setmethods__["MSGTYPE"] = _pcan_module.TPCANMsg_MSGTYPE_set
    __swig_getmethods__["MSGTYPE"] = _pcan_module.TPCANMsg_MSGTYPE_get
    if _newclass:MSGTYPE = _swig_property(_pcan_module.TPCANMsg_MSGTYPE_get, _pcan_module.TPCANMsg_MSGTYPE_set)
    __swig_setmethods__["LEN"] = _pcan_module.TPCANMsg_LEN_set
    __swig_getmethods__["LEN"] = _pcan_module.TPCANMsg_LEN_get
    if _newclass:LEN = _swig_property(_pcan_module.TPCANMsg_LEN_get, _pcan_module.TPCANMsg_LEN_set)
    __swig_setmethods__["DATA"] = _pcan_module.TPCANMsg_DATA_set
    __swig_getmethods__["DATA"] = _pcan_module.TPCANMsg_DATA_get
    if _newclass:DATA = _swig_property(_pcan_module.TPCANMsg_DATA_get, _pcan_module.TPCANMsg_DATA_set)
    def __init__(self): 
        this = _pcan_module.new_TPCANMsg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcan_module.delete_TPCANMsg
    __del__ = lambda self : None;
TPCANMsg_swigregister = _pcan_module.TPCANMsg_swigregister
TPCANMsg_swigregister(TPCANMsg)

class TPCANRdMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPCANRdMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPCANRdMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Msg"] = _pcan_module.TPCANRdMsg_Msg_set
    __swig_getmethods__["Msg"] = _pcan_module.TPCANRdMsg_Msg_get
    if _newclass:Msg = _swig_property(_pcan_module.TPCANRdMsg_Msg_get, _pcan_module.TPCANRdMsg_Msg_set)
    __swig_setmethods__["dwTime"] = _pcan_module.TPCANRdMsg_dwTime_set
    __swig_getmethods__["dwTime"] = _pcan_module.TPCANRdMsg_dwTime_get
    if _newclass:dwTime = _swig_property(_pcan_module.TPCANRdMsg_dwTime_get, _pcan_module.TPCANRdMsg_dwTime_set)
    __swig_setmethods__["wUsec"] = _pcan_module.TPCANRdMsg_wUsec_set
    __swig_getmethods__["wUsec"] = _pcan_module.TPCANRdMsg_wUsec_get
    if _newclass:wUsec = _swig_property(_pcan_module.TPCANRdMsg_wUsec_get, _pcan_module.TPCANRdMsg_wUsec_set)
    def __init__(self): 
        this = _pcan_module.new_TPCANRdMsg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcan_module.delete_TPCANRdMsg
    __del__ = lambda self : None;
TPCANRdMsg_swigregister = _pcan_module.TPCANRdMsg_swigregister
TPCANRdMsg_swigregister(TPCANRdMsg)

class TPSTATUS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPSTATUS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPSTATUS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wErrorFlag"] = _pcan_module.TPSTATUS_wErrorFlag_set
    __swig_getmethods__["wErrorFlag"] = _pcan_module.TPSTATUS_wErrorFlag_get
    if _newclass:wErrorFlag = _swig_property(_pcan_module.TPSTATUS_wErrorFlag_get, _pcan_module.TPSTATUS_wErrorFlag_set)
    __swig_setmethods__["nLastError"] = _pcan_module.TPSTATUS_nLastError_set
    __swig_getmethods__["nLastError"] = _pcan_module.TPSTATUS_nLastError_get
    if _newclass:nLastError = _swig_property(_pcan_module.TPSTATUS_nLastError_get, _pcan_module.TPSTATUS_nLastError_set)
    def __init__(self): 
        this = _pcan_module.new_TPSTATUS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcan_module.delete_TPSTATUS
    __del__ = lambda self : None;
TPSTATUS_swigregister = _pcan_module.TPSTATUS_swigregister
TPSTATUS_swigregister(TPSTATUS)

class TPDIAG(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPDIAG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPDIAG, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wType"] = _pcan_module.TPDIAG_wType_set
    __swig_getmethods__["wType"] = _pcan_module.TPDIAG_wType_get
    if _newclass:wType = _swig_property(_pcan_module.TPDIAG_wType_get, _pcan_module.TPDIAG_wType_set)
    __swig_setmethods__["dwBase"] = _pcan_module.TPDIAG_dwBase_set
    __swig_getmethods__["dwBase"] = _pcan_module.TPDIAG_dwBase_get
    if _newclass:dwBase = _swig_property(_pcan_module.TPDIAG_dwBase_get, _pcan_module.TPDIAG_dwBase_set)
    __swig_setmethods__["wIrqLevel"] = _pcan_module.TPDIAG_wIrqLevel_set
    __swig_getmethods__["wIrqLevel"] = _pcan_module.TPDIAG_wIrqLevel_get
    if _newclass:wIrqLevel = _swig_property(_pcan_module.TPDIAG_wIrqLevel_get, _pcan_module.TPDIAG_wIrqLevel_set)
    __swig_setmethods__["dwReadCounter"] = _pcan_module.TPDIAG_dwReadCounter_set
    __swig_getmethods__["dwReadCounter"] = _pcan_module.TPDIAG_dwReadCounter_get
    if _newclass:dwReadCounter = _swig_property(_pcan_module.TPDIAG_dwReadCounter_get, _pcan_module.TPDIAG_dwReadCounter_set)
    __swig_setmethods__["dwWriteCounter"] = _pcan_module.TPDIAG_dwWriteCounter_set
    __swig_getmethods__["dwWriteCounter"] = _pcan_module.TPDIAG_dwWriteCounter_get
    if _newclass:dwWriteCounter = _swig_property(_pcan_module.TPDIAG_dwWriteCounter_get, _pcan_module.TPDIAG_dwWriteCounter_set)
    __swig_setmethods__["dwIRQcounter"] = _pcan_module.TPDIAG_dwIRQcounter_set
    __swig_getmethods__["dwIRQcounter"] = _pcan_module.TPDIAG_dwIRQcounter_get
    if _newclass:dwIRQcounter = _swig_property(_pcan_module.TPDIAG_dwIRQcounter_get, _pcan_module.TPDIAG_dwIRQcounter_set)
    __swig_setmethods__["dwErrorCounter"] = _pcan_module.TPDIAG_dwErrorCounter_set
    __swig_getmethods__["dwErrorCounter"] = _pcan_module.TPDIAG_dwErrorCounter_get
    if _newclass:dwErrorCounter = _swig_property(_pcan_module.TPDIAG_dwErrorCounter_get, _pcan_module.TPDIAG_dwErrorCounter_set)
    __swig_setmethods__["wErrorFlag"] = _pcan_module.TPDIAG_wErrorFlag_set
    __swig_getmethods__["wErrorFlag"] = _pcan_module.TPDIAG_wErrorFlag_get
    if _newclass:wErrorFlag = _swig_property(_pcan_module.TPDIAG_wErrorFlag_get, _pcan_module.TPDIAG_wErrorFlag_set)
    __swig_setmethods__["nLastError"] = _pcan_module.TPDIAG_nLastError_set
    __swig_getmethods__["nLastError"] = _pcan_module.TPDIAG_nLastError_get
    if _newclass:nLastError = _swig_property(_pcan_module.TPDIAG_nLastError_get, _pcan_module.TPDIAG_nLastError_set)
    __swig_setmethods__["nOpenPaths"] = _pcan_module.TPDIAG_nOpenPaths_set
    __swig_getmethods__["nOpenPaths"] = _pcan_module.TPDIAG_nOpenPaths_get
    if _newclass:nOpenPaths = _swig_property(_pcan_module.TPDIAG_nOpenPaths_get, _pcan_module.TPDIAG_nOpenPaths_set)
    __swig_setmethods__["szVersionString"] = _pcan_module.TPDIAG_szVersionString_set
    __swig_getmethods__["szVersionString"] = _pcan_module.TPDIAG_szVersionString_get
    if _newclass:szVersionString = _swig_property(_pcan_module.TPDIAG_szVersionString_get, _pcan_module.TPDIAG_szVersionString_set)
    def __init__(self): 
        this = _pcan_module.new_TPDIAG()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcan_module.delete_TPDIAG
    __del__ = lambda self : None;
TPDIAG_swigregister = _pcan_module.TPDIAG_swigregister
TPDIAG_swigregister(TPDIAG)

class TPBTR0BTR1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPBTR0BTR1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPBTR0BTR1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dwBitRate"] = _pcan_module.TPBTR0BTR1_dwBitRate_set
    __swig_getmethods__["dwBitRate"] = _pcan_module.TPBTR0BTR1_dwBitRate_get
    if _newclass:dwBitRate = _swig_property(_pcan_module.TPBTR0BTR1_dwBitRate_get, _pcan_module.TPBTR0BTR1_dwBitRate_set)
    __swig_setmethods__["wBTR0BTR1"] = _pcan_module.TPBTR0BTR1_wBTR0BTR1_set
    __swig_getmethods__["wBTR0BTR1"] = _pcan_module.TPBTR0BTR1_wBTR0BTR1_get
    if _newclass:wBTR0BTR1 = _swig_property(_pcan_module.TPBTR0BTR1_wBTR0BTR1_get, _pcan_module.TPBTR0BTR1_wBTR0BTR1_set)
    def __init__(self): 
        this = _pcan_module.new_TPBTR0BTR1()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcan_module.delete_TPBTR0BTR1
    __del__ = lambda self : None;
TPBTR0BTR1_swigregister = _pcan_module.TPBTR0BTR1_swigregister
TPBTR0BTR1_swigregister(TPBTR0BTR1)

class TPEXTENDEDSTATUS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPEXTENDEDSTATUS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPEXTENDEDSTATUS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wErrorFlag"] = _pcan_module.TPEXTENDEDSTATUS_wErrorFlag_set
    __swig_getmethods__["wErrorFlag"] = _pcan_module.TPEXTENDEDSTATUS_wErrorFlag_get
    if _newclass:wErrorFlag = _swig_property(_pcan_module.TPEXTENDEDSTATUS_wErrorFlag_get, _pcan_module.TPEXTENDEDSTATUS_wErrorFlag_set)
    __swig_setmethods__["nLastError"] = _pcan_module.TPEXTENDEDSTATUS_nLastError_set
    __swig_getmethods__["nLastError"] = _pcan_module.TPEXTENDEDSTATUS_nLastError_get
    if _newclass:nLastError = _swig_property(_pcan_module.TPEXTENDEDSTATUS_nLastError_get, _pcan_module.TPEXTENDEDSTATUS_nLastError_set)
    __swig_setmethods__["nPendingReads"] = _pcan_module.TPEXTENDEDSTATUS_nPendingReads_set
    __swig_getmethods__["nPendingReads"] = _pcan_module.TPEXTENDEDSTATUS_nPendingReads_get
    if _newclass:nPendingReads = _swig_property(_pcan_module.TPEXTENDEDSTATUS_nPendingReads_get, _pcan_module.TPEXTENDEDSTATUS_nPendingReads_set)
    __swig_setmethods__["nPendingWrites"] = _pcan_module.TPEXTENDEDSTATUS_nPendingWrites_set
    __swig_getmethods__["nPendingWrites"] = _pcan_module.TPEXTENDEDSTATUS_nPendingWrites_get
    if _newclass:nPendingWrites = _swig_property(_pcan_module.TPEXTENDEDSTATUS_nPendingWrites_get, _pcan_module.TPEXTENDEDSTATUS_nPendingWrites_set)
    def __init__(self): 
        this = _pcan_module.new_TPEXTENDEDSTATUS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcan_module.delete_TPEXTENDEDSTATUS
    __del__ = lambda self : None;
TPEXTENDEDSTATUS_swigregister = _pcan_module.TPEXTENDEDSTATUS_swigregister
TPEXTENDEDSTATUS_swigregister(TPEXTENDEDSTATUS)

class TPMSGFILTER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPMSGFILTER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPMSGFILTER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FromID"] = _pcan_module.TPMSGFILTER_FromID_set
    __swig_getmethods__["FromID"] = _pcan_module.TPMSGFILTER_FromID_get
    if _newclass:FromID = _swig_property(_pcan_module.TPMSGFILTER_FromID_get, _pcan_module.TPMSGFILTER_FromID_set)
    __swig_setmethods__["ToID"] = _pcan_module.TPMSGFILTER_ToID_set
    __swig_getmethods__["ToID"] = _pcan_module.TPMSGFILTER_ToID_get
    if _newclass:ToID = _swig_property(_pcan_module.TPMSGFILTER_ToID_get, _pcan_module.TPMSGFILTER_ToID_set)
    __swig_setmethods__["MSGTYPE"] = _pcan_module.TPMSGFILTER_MSGTYPE_set
    __swig_getmethods__["MSGTYPE"] = _pcan_module.TPMSGFILTER_MSGTYPE_get
    if _newclass:MSGTYPE = _swig_property(_pcan_module.TPMSGFILTER_MSGTYPE_get, _pcan_module.TPMSGFILTER_MSGTYPE_set)
    def __init__(self): 
        this = _pcan_module.new_TPMSGFILTER()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcan_module.delete_TPMSGFILTER
    __del__ = lambda self : None;
TPMSGFILTER_swigregister = _pcan_module.TPMSGFILTER_swigregister
TPMSGFILTER_swigregister(TPMSGFILTER)

SF_GET_SERIALNUMBER = _pcan_module.SF_GET_SERIALNUMBER
SF_SET_SERIALNUMBER = _pcan_module.SF_SET_SERIALNUMBER
SF_GET_HCDEVICENO = _pcan_module.SF_GET_HCDEVICENO
SF_SET_HCDEVICENO = _pcan_module.SF_SET_HCDEVICENO
class TPEXTRAPARAMS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPEXTRAPARAMS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPEXTRAPARAMS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nSubFunction"] = _pcan_module.TPEXTRAPARAMS_nSubFunction_set
    __swig_getmethods__["nSubFunction"] = _pcan_module.TPEXTRAPARAMS_nSubFunction_get
    if _newclass:nSubFunction = _swig_property(_pcan_module.TPEXTRAPARAMS_nSubFunction_get, _pcan_module.TPEXTRAPARAMS_nSubFunction_set)
    __swig_getmethods__["func"] = _pcan_module.TPEXTRAPARAMS_func_get
    if _newclass:func = _swig_property(_pcan_module.TPEXTRAPARAMS_func_get)
    def __init__(self): 
        this = _pcan_module.new_TPEXTRAPARAMS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcan_module.delete_TPEXTRAPARAMS
    __del__ = lambda self : None;
TPEXTRAPARAMS_swigregister = _pcan_module.TPEXTRAPARAMS_swigregister
TPEXTRAPARAMS_swigregister(TPEXTRAPARAMS)

class TPEXTRAPARAMS_func(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPEXTRAPARAMS_func, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPEXTRAPARAMS_func, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dwSerialNumber"] = _pcan_module.TPEXTRAPARAMS_func_dwSerialNumber_set
    __swig_getmethods__["dwSerialNumber"] = _pcan_module.TPEXTRAPARAMS_func_dwSerialNumber_get
    if _newclass:dwSerialNumber = _swig_property(_pcan_module.TPEXTRAPARAMS_func_dwSerialNumber_get, _pcan_module.TPEXTRAPARAMS_func_dwSerialNumber_set)
    __swig_setmethods__["ucHCDeviceNo"] = _pcan_module.TPEXTRAPARAMS_func_ucHCDeviceNo_set
    __swig_getmethods__["ucHCDeviceNo"] = _pcan_module.TPEXTRAPARAMS_func_ucHCDeviceNo_get
    if _newclass:ucHCDeviceNo = _swig_property(_pcan_module.TPEXTRAPARAMS_func_ucHCDeviceNo_get, _pcan_module.TPEXTRAPARAMS_func_ucHCDeviceNo_set)
    def __init__(self): 
        this = _pcan_module.new_TPEXTRAPARAMS_func()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcan_module.delete_TPEXTRAPARAMS_func
    __del__ = lambda self : None;
TPEXTRAPARAMS_func_swigregister = _pcan_module.TPEXTRAPARAMS_func_swigregister
TPEXTRAPARAMS_func_swigregister(TPEXTRAPARAMS_func)

PCAN_MAGIC_NUMBER = _pcan_module.PCAN_MAGIC_NUMBER
MYSEQ_START = _pcan_module.MYSEQ_START

def open_can(*args):
  return _pcan_module.open_can(*args)
open_can = _pcan_module.open_can

def close_can():
  return _pcan_module.close_can()
close_can = _pcan_module.close_can

def get_version_info():
  return _pcan_module.get_version_info()
get_version_info = _pcan_module.get_version_info

def configure_can():
  return _pcan_module.configure_can()
configure_can = _pcan_module.configure_can

def read_can_msg():
  return _pcan_module.read_can_msg()
read_can_msg = _pcan_module.read_can_msg

def send_can_msg(*args):
  return _pcan_module.send_can_msg(*args)
send_can_msg = _pcan_module.send_can_msg
# This file is compatible with both classic and new-style classes.

cvar = _pcan_module.cvar

